{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NERDSS Tutorials","text":"<p>Welcome to the official tutorials for NERDSS, NonEquilibrium Reaction-Diffusion Self-assembly Simulator.</p> <p></p> <p>NERDSS is a state-of-the-art scientific software designed to help researchers simulate the structure-resolved reaction-diffusion model in cell.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide</li> <li>Basic Usage</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Dive deep into specific features and use-cases with our detailed tutorials.</p> <ul> <li>Tutorial 1: Get Molecule Geometry from PDB Structure</li> <li>Tutorial 2: Clathrin Assembly</li> <li>Tutorial 3: Virus Assembly</li> <li>Tutorial 4: Data Analysis of Output</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository</li> <li>FAQs</li> <li>Johnson Group</li> </ul>"},{"location":"#publications","title":"Publications","text":"<ul> <li>Full Publication List</li> </ul> <p>We ask that you cite: Varga, M., Fu, Y., Loggia, S., Yogurtcu, O.N., &amp; M.E. Johnson NERDSS: a nonequilibrium simulator for multibody self-assembly at the cellular scale. Biophysical Journal 118, P3026-P3040 (2020) in all publications that make use of NERDSS.</p>"},{"location":"basic_usage/","title":"Running a Basic NERDSS Simulation","text":"<p>After installing NERDSS, let's run a basic simulation to understand its philosophy. We will simulate the reversible reaction A(a) + R(r) &lt;-&gt; A(a!1).R(r!1) in a 3D solution. For a comprehensive guide to using NERDSS, please refer to user guide in the NERDSS repository.</p>"},{"location":"basic_usage/#prepare-the-inp-file-for-the-simulation","title":"Prepare the .inp file for the simulation","text":"<p>Following is the content of the .inp file that we will use in the simulaiton . You can download it here. Please refer to user guide in the NERDSS repository for the explanation of each parameter.</p> <pre><code>start parameters\n    nItr = 700000 # steps\n    timeStep = 0.1 # us\n    timeWrite = 200 # steps\n    pdbWrite = 10000 # steps\n    checkPoint = 70000 # steps\n    restartWrite = 10000 # steps\nend parameters\n\nstart boundaries\n    WaterBox = [939.993,939.993,939.993] # nm\nend boundaries\n\nstart molecules\n    A : 1000\n    R : 1000\nend molecules\n\nstart reactions\n    A(a) + R(r) &lt;-&gt; A(a!1).R(r!1)\n        onRate3Dka = 988.19 # 3D microscopic binding rate, nm^2/us\n        offRatekb = 99.15 # microscopic dissociation rate, s^-1\n        norm1 = [0,0,1]\n        norm2 = [0,0,1]\n        sigma = 2.0\n        assocAngles = [nan,nan,nan,nan,nan]\n        bindRadSameCom = 1.1\nend reactions\n</code></pre>"},{"location":"basic_usage/#prepare-the-mol-files-for-the-molecule-types-in-the-simulation","title":"Prepare the .mol files for the molecule types in the simulation","text":"<p>The following A.mol file is needed for the simulation and can be downloaded from here.</p> <pre><code>name    = A\n\n# translational diffusion constants\nD       = [20.0,20.0,20.0]\n\n# rotational diffusion constants\nDr      = [0.0,0.0,0.0]\n\n# Coordinates\nCOM     0.0000    0.0000    0.0000\na       0.0000    0.0000    0.0000\n</code></pre> <p>The following R.mol file is also required for the simulation and can be downloaded from here.</p> <pre><code>name    = R\n\n# translational diffusion constants\nD       = [20.0,20.0,20.0]\n\n# rotational diffusion constants\nDr      = [0.0,0.0,0.0]\n\n# Coordinates\nCOM     0.0000    0.0000    0.0000\nr       0.0000    0.0000    0.0000\n</code></pre> <p>Please refer to user guide in the NERDSS repository for the explanation of each parameter.</p>"},{"location":"basic_usage/#use-the-gui-provided-in-the-ionerdss-library-to-generate-the-inp-and-mol-files-optional","title":"Use the GUI provided in the ioNERDSS library to generate the .inp and .mol files (optional)","text":"<p>You can generate input files using the GUI provided by the ioNERDSS library. After installing ioNERDSS using pip, start a Python interpreter and run the following command to start the GUI:</p> <pre><code>import ioNERDSS as ion\nion.gui()\n</code></pre> <p>Fill out the parameters in the different sections, add each molecule one by one, followed by each reaction. Finally, click on the \"Generate\" button. Below are some snapshots.</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"basic_usage/#run-the-simulation","title":"Run the simulation","text":"<p>Make sure your .inp and .mol files are in the same folder. Navigate to that folder.</p>"},{"location":"basic_usage/#run-the-simulation-in-the-local-environment-generally-faster","title":"Run the simulation in the local environment (Generally faster)","text":"<p>If you want to run NERDSS locally, add it to your PATH and start the simulation by running:</p> <pre><code>./nerdss -f &lt;your-input-filename&gt;.inp\n</code></pre>"},{"location":"basic_usage/#run-the-simulation-using-docker","title":"Run the simulation using Docker","text":"<p>If you are using Docker, start the simulation by running:</p> <pre><code>docker run -e RUN_NERDSS=true -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>The simulation will then begin. The standard output is written to output.log. Once it is done, a Jupyter environment with <code>ioNERDSS</code> installed will be ready for use.</p>"},{"location":"basic_usage/#outputs-of-the-simulation","title":"Outputs of the simulation","text":"<p>The file copy_numbers_time.dat stores the time dependence of the copy numbers of all species in the system. Below are the first five lines of this file.</p> <pre><code>Time (s),A(a),R(r),A(a!1).R(r!1)\n0,1000,1000,0\n2e-05,990,990,10\n4e-05,980,980,20\n6e-05,966,966,34\n</code></pre> <p>The file histogram_complexes_time.dat contains the time dependence of the complex components. The first ten lines of this file are shown below.</p> <pre><code>Time (s): 0\n1000    A: 1.\n1000    R: 1.\nTime (s): 2e-05\n990 A: 1.\n10  A: 1. R: 1.\n990 R: 1.\nTime (s): 4e-05\n980 A: 1.\n20  A: 1. R: 1.\n980 R: 1.\n</code></pre> <p>The simulation snapshots are stored in the <code>PDB/</code> folder and are in the PDB format.</p>"},{"location":"basic_usage/#analyze-the-output","title":"Analyze the output","text":"<p>We will create a plot of monomer A(a) vs Time (s) and compare the simulation result with the ODE theory.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the simulation data from the file\nsim_df = pd.read_csv('copy_numbers_time.dat', sep=',')\n\n# Read the ODE theory data from the file\n# Using regex to handle one or more spaces as the separator\node_df = pd.read_csv('theoryODE.dat', sep=r'\\s+', skipinitialspace=True)\n\n# Plotting\nplt.figure(figsize=(6, 4))  # Adjust the figure size (width, height) in inches\nplt.plot(sim_df['Time (s)'], sim_df['A(a)'], 'o-', label='Simulation')\nplt.plot(ode_df['time(s)'], ode_df['A(t)'], 's-', label='ODE Theory')\n\nplt.xlabel('Time (s)', fontsize=14)\nplt.ylabel('A(a)', fontsize=14)\nplt.title('Monomer A(a) vs Time (s)', fontsize=16)\nplt.legend(fontsize=12)\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.tight_layout()\n\n# Save the figure in PNG format with a resolution of 300 dpi\nplt.savefig('comparison_plot.png', dpi=300, bbox_inches='tight')\n\nplt.show()\n</code></pre> <p></p>"},{"location":"basic_usage/#render-movies-for-the-trajectory","title":"Render movies for the trajectory","text":"<p>You can generate movies using the PDB format with OVITO.</p> <p></p>"},{"location":"dataAnalysis/","title":"Analyze the Simulation Results Using ioNERDSS","text":"<p>You can find the tutorials for ioNERDSS here.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#quick-start-guide-for-nerdss-setup","title":"Quick Start Guide for NERDSS Setup","text":"<p>Note:</p> <p>If you prefer using Docker for environment setup (it might be slow), jump directly to Step 4.</p> <p>Windows OS: It's recommended to use either Windows Subsystem for Linux (WSL) or Docker.</p> <p>Step 1: Clone the Repository</p> <pre><code>git clone https://github.com/mjohn218/NERDSS.git\n</code></pre> <p>Step 2: Install Dependencies</p> <ul> <li>For Ubuntu or WSL:</li> </ul> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential libgsl-dev\n</code></pre> <ul> <li>For macOS:</li> </ul> <p>Install Homebrew:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Install GCC and GSL:</p> <pre><code>brew update\nbrew install gcc gsl\n</code></pre> <p>Step 3: Compile NERDSS</p> <p>Navigate to the NERDSS directory and compile:</p> <pre><code>cd NERDSS\nmake serial\n</code></pre> <p>The resulting executable will be located in the <code>bin</code> folder.</p> <p>Install ioNERDSS library from PyPi</p> <p>Install Anaconda, then</p> <pre><code>conda create --name ionerdss\nconda activate ionerdss\nconda install pip\npip install ioNERDSS\npip install jupyter\n</code></pre> <p>Step 4: Using Docker for Environment Setup (Optional)</p> <p>If you'd rather not install the required tools directly on your machine, you can use Docker:</p> <ul> <li> <p>Install Docker</p> </li> <li> <p>Pull the pre-configured Docker image:</p> </li> </ul> <p>Intel Chip:</p> <pre><code>docker pull sikaoguo/nerdsstutorial:latest\n</code></pre> <p>Mac M1 Chip:</p> <pre><code>docker pull sikaoguo/nerdsstutorial:m1\n</code></pre> <ul> <li>Launch the Docker image:</li> </ul> <p>To run <code>nerdss</code> with the <code>.inp</code> file in the current folder and start Jupyter for analyze after the simulation done:</p> <pre><code>docker run -e RUN_NERDSS=true -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To run only <code>nerdss</code>:</p> <pre><code>docker run -e RUN_NERDSS=true -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To start only <code>Jupyter</code>:</p> <pre><code>docker run -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To run Container only:</p> <pre><code>docker run -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>Note: Replace <code>$(pwd)</code> with <code>${PWD}</code> in Windows powershell.</p> <p>When you do the above, any changes you make to current folder on your local machine will be reflected in <code>/SIMULATION</code> in the Docker container, and vice versa.</p> <ol> <li> <p>Copying files from host to container:      <code>bash     docker cp &lt;path-on-host&gt; &lt;container-id-or-name&gt;:&lt;path-in-container&gt;</code></p> </li> <li> <p>Copying files from container to host:     <code>bash     docker cp &lt;container-id-or-name&gt;:&lt;path-in-container&gt; &lt;path-on-host&gt;</code></p> </li> </ol>"},{"location":"pub/","title":"Publications Using NERDSS","text":"<ul> <li>Jhaveri, A., Loggia, S., Qian, Y., &amp; Johnson, M.E.* Discovering optimal kinetic pathways for self-assembly using automatic differentiation.\u00a0Submitted, (2023).</li> <li>Xie, Q., Lee, S.O., Vissamsetti, N., Guo, S.,\u00a0Johnson, M.E., Fried, S.D.\u00a0Secretion-Catalyzed Assembly of Protein Biomaterials on a Bacterial Membrane Surface.\u00a0Angewantde Chemie,\u00a0e202305178 (2023).</li> <li>Qian, Y., Evans, D., Mishra, B., Fu, Y., Liu, Z., Guo, S. &amp; Johnson, M.E.*\u00a0Temporal control by co-factors prevents kinetic trapping in retroviral Gag lattice assembly Biophysical Journal,\u00a0122, 1-18. (2023)\u00a0bioRxiv version</li> <li>Guo, S., Saha, I., Saffarian, S., &amp; Johnson, M.E.*\u00a0Structure of the HIV immature lattice allows for essential lattice remodeling within budded virions.\u00a0eLife\u00a084881 (2023).\u00a0bioRxiv version</li> <li>Guo, S., Sodt, A.J., &amp; Johnson, M.E.*\u00a0Large self-assembled clathrin lattices spontaneously disassemble without sufficient adaptor proteins.\u00a0PLoS Comp. Biol.\u00a018,\u00a0e1009969\u00a0(2022).</li> </ul>"}]}