{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NERDSS Tutorials","text":"<p>Welcome to the official tutorials for NERDSS, NonEquilibrium Reaction-Diffusion Self-assembly Simulator.</p> <p></p> <p>NERDSS is a state-of-the-art scientific software designed to help researchers simulate the structure-resolved reaction-diffusion model in cell.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide</li> <li>Basic Usage</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Dive deep into specific features and use-cases with our detailed tutorials.</p> <ul> <li>Tutorial 1: Get Molecule Geometry from PDB Structure</li> <li>Tutorial 2: Clathrin Assembly</li> <li>Tutorial 3: Virus Assembly</li> <li>Tutorial 4: Data Analysis of Output</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository</li> <li>FAQs</li> <li>Johnson Group</li> </ul>"},{"location":"#publications","title":"Publications","text":"<ul> <li>Full Publication List</li> </ul> <p>We ask that you cite: Varga, M., Fu, Y., Loggia, S., Yogurtcu, O.N., &amp; M.E. Johnson NERDSS: a nonequilibrium simulator for multibody self-assembly at the cellular scale. Biophysical Journal 118, P3026-P3040 (2020) in all publications that make use of NERDSS.</p>"},{"location":"basic_usage/","title":"Running a Basic NERDSS Simulation","text":"<p>After installing NERDSS, let's run a basic simulation to understand its philosophy. We will simulate the reversible reaction A(a) + R(r) &lt;-&gt; A(a!1).R(r!1) in a 3D solution. For a comprehensive guide to using NERDSS, please refer to user guide in the NERDSS repository.</p>"},{"location":"basic_usage/#prepare-the-inp-file-for-the-simulation","title":"Prepare the .inp file for the simulation","text":"<p>Following is the content of the .inp file that we will use in the simulaiton . You can download it here. Please refer to user guide in the NERDSS repository for the explanation of each parameter.</p> <pre><code>start parameters\n    nItr = 700000 # steps\n    timeStep = 0.1 # us\n    timeWrite = 200 # steps\n    pdbWrite = 10000 # steps\n    checkPoint = 70000 # steps\n    restartWrite = 10000 # steps\nend parameters\n\nstart boundaries\n    WaterBox = [939.993,939.993,939.993] # nm\nend boundaries\n\nstart molecules\n    A : 1000\n    R : 1000\nend molecules\n\nstart reactions\n    A(a) + R(r) &lt;-&gt; A(a!1).R(r!1)\n        onRate3Dka = 988.19 # 3D microscopic binding rate, nm^2/us\n        offRatekb = 99.15 # microscopic dissociation rate, s^-1\n        norm1 = [0,0,1]\n        norm2 = [0,0,1]\n        sigma = 2.0\n        assocAngles = [nan,nan,nan,nan,nan]\n        bindRadSameCom = 1.1\nend reactions\n</code></pre>"},{"location":"basic_usage/#prepare-the-mol-files-for-the-molecule-types-in-the-simulation","title":"Prepare the .mol files for the molecule types in the simulation","text":"<p>The following A.mol file is needed for the simulation and can be downloaded from here.</p> <pre><code>name    = A\n\n# translational diffusion constants\nD       = [20.0,20.0,20.0]\n\n# rotational diffusion constants\nDr      = [0.0,0.0,0.0]\n\n# Coordinates\nCOM     0.0000    0.0000    0.0000\na       0.0000    0.0000    0.0000\n</code></pre> <p>The following R.mol file is also required for the simulation and can be downloaded from here.</p> <pre><code>name    = R\n\n# translational diffusion constants\nD       = [20.0,20.0,20.0]\n\n# rotational diffusion constants\nDr      = [0.0,0.0,0.0]\n\n# Coordinates\nCOM     0.0000    0.0000    0.0000\nr       0.0000    0.0000    0.0000\n</code></pre> <p>Please refer to user guide in the NERDSS repository for the explanation of each parameter.</p>"},{"location":"basic_usage/#use-the-gui-provided-in-the-ionerdss-library-to-generate-the-inp-and-mol-files-optional","title":"Use the GUI provided in the ioNERDSS library to generate the .inp and .mol files (optional)","text":"<p>You can generate input files using the GUI provided by the ioNERDSS library. After installing ioNERDSS using pip, start a Python interpreter and run the following command to start the GUI:</p> <pre><code>import ioNERDSS as ion\nion.gui()\n</code></pre> <p>Fill out the parameters in the different sections, add each molecule one by one, followed by each reaction. Finally, click on the \"Generate\" button. Below are some snapshots.</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"basic_usage/#run-the-simulation","title":"Run the simulation","text":"<p>Make sure your .inp and .mol files are in the same folder. Navigate to that folder.</p>"},{"location":"basic_usage/#run-the-simulation-in-the-local-environment-generally-faster","title":"Run the simulation in the local environment (Generally faster)","text":"<p>If you want to run NERDSS locally, add it to your PATH and start the simulation by running:</p> <pre><code>./nerdss -f &lt;your-input-filename&gt;.inp\n</code></pre>"},{"location":"basic_usage/#run-the-simulation-using-docker","title":"Run the simulation using Docker","text":"<p>If you are using Docker, start the simulation by running:</p> <pre><code>docker run -e RUN_NERDSS=true -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>The simulation will then begin. The standard output is written to output.log. Once it is done, a Jupyter environment with <code>ioNERDSS</code> installed will be ready for use.</p>"},{"location":"basic_usage/#outputs-of-the-simulation","title":"Outputs of the simulation","text":"<p>The file copy_numbers_time.dat stores the time dependence of the copy numbers of all species in the system. Below are the first five lines of this file.</p> <pre><code>Time (s),A(a),R(r),A(a!1).R(r!1)\n0,1000,1000,0\n2e-05,990,990,10\n4e-05,980,980,20\n6e-05,966,966,34\n</code></pre> <p>The file histogram_complexes_time.dat contains the time dependence of the complex components. The first ten lines of this file are shown below.</p> <pre><code>Time (s): 0\n1000    A: 1.\n1000    R: 1.\nTime (s): 2e-05\n990 A: 1.\n10  A: 1. R: 1.\n990 R: 1.\nTime (s): 4e-05\n980 A: 1.\n20  A: 1. R: 1.\n980 R: 1.\n</code></pre> <p>The simulation snapshots are stored in the <code>PDB/</code> folder and are in the PDB format.</p>"},{"location":"basic_usage/#analyze-the-output","title":"Analyze the output","text":"<p>We will create a plot of monomer A(a) vs Time (s) and compare the simulation result with the ODE theory.</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the simulation data from the file\nsim_df = pd.read_csv('copy_numbers_time.dat', sep=',')\n\n# Read the ODE theory data from the file\n# Using regex to handle one or more spaces as the separator\node_df = pd.read_csv('theoryODE.dat', sep=r'\\s+', skipinitialspace=True)\n\n# Plotting\nplt.figure(figsize=(6, 4))  # Adjust the figure size (width, height) in inches\nplt.plot(sim_df['Time (s)'], sim_df['A(a)'], 'o-', label='Simulation')\nplt.plot(ode_df['time(s)'], ode_df['A(t)'], 's-', label='ODE Theory')\n\nplt.xlabel('Time (s)', fontsize=14)\nplt.ylabel('A(a)', fontsize=14)\nplt.title('Monomer A(a) vs Time (s)', fontsize=16)\nplt.legend(fontsize=12)\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.tight_layout()\n\n# Save the figure in PNG format with a resolution of 300 dpi\nplt.savefig('comparison_plot.png', dpi=300, bbox_inches='tight')\n\nplt.show()\n</code></pre> <p></p>"},{"location":"basic_usage/#render-movies-for-the-trajectory","title":"Render movies for the trajectory","text":"<p>You can generate movies using the PDB format with OVITO.</p> <p></p>"},{"location":"clathrinAssembly/","title":"Clathrin Assembly Simulation","text":"<p>The inputs can be found here.</p>"},{"location":"dataAnalysis/","title":"Analyze the Simulation Results Using ioNERDSS","text":"<p>You can find the tutorials for ioNERDSS here.</p>"},{"location":"getMolGeometryFromPDBStructure/","title":"Read PDB structures from the database and generate NERDSS inputs","text":"<p>This tutorial will explore how to generate inputs for NERDSS using the real PDB structure with the Yeast TFIIK Complex as an example. Download the PDB file and save it under your working directory.</p>"},{"location":"getMolGeometryFromPDBStructure/#install-and-import-the-library","title":"Install and Import the library","text":"<pre><code>pip install ioNERDSS\n</code></pre> <pre><code>import ioNERDSS as ion\n</code></pre>"},{"location":"getMolGeometryFromPDBStructure/#visualize-the-pdb-structure","title":"Visualize the PDB structure","text":"<p>This PDB structure has 3 chains. Each chain will be modeled to a molecule type in NERDSS simulation. And the molecules can assemble into the complex.</p> <p></p>"},{"location":"getMolGeometryFromPDBStructure/#use-ionerdss-to-construct-the-coarse-grained-structure","title":"Use ioNERDSS to construct the coarse-grained structure","text":"<pre><code>ion.cg('6xi8', 3.5)\n</code></pre> <p>The coarse-graind structure is saved as output.pdb. Following is the visualization of the original structure and the coarse-grained structure:</p> <p></p> <p>The output for NERDSS input structure parameters:</p> <pre><code>COM of chain C: 8.560, 9.803, 10.088\nInterfaces of chain C: CA partner chain: A 8.936 10.472 9.434 energy: 91.000\nCB partner chain: B 8.827 9.069 10.649 energy: 100.310\n\nCOM of chain A: 9.204, 10.077, 7.857\nInterfaces of chain A: AC partner chain: C 9.016 10.492 9.302 energy: 91.000\nAB partner chain: B 10.524 9.176 8.997 energy: 61.450\n\nCOM of chain B: 10.686, 8.405, 10.765\nInterfaces of chain B: BC partner chain: C 8.893 9.041 10.748 energy: 100.310\nBA partner chain: A 10.544 9.154 9.213 energy: 61.450\n\noutput.pdb has been generated.\nnerdss input parameters:\nmol C:\n  com 0.000 0.000 0.000\n  CA [0.376, 0.669, -0.654]\n      partner A\n      partner interface: AC\n      theta1 2.548 theta2 2.563 phi1 -0.749 phi2 1.886 omega 0.808\n      [2.548, 2.563, -0.749, 1.886, 0.808]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.156\n       energy 91.000\n  CB [0.267, -0.733, 0.560]\n      partner B\n      partner interface: BC\n      theta1 2.496 theta2 2.205 phi1 2.351 phi2 -0.047 omega -1.672\n      [2.496, 2.205, 2.351, -0.047, -1.672]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.122\n       energy 100.310\nmol A:\n  com 0.000 0.000 0.000\n  AC [-0.188, 0.415, 1.446]\n      partner C\n      partner interface: CA\n      theta1 2.563 theta2 2.548 phi1 1.886 phi2 -0.749 omega 0.808\n      [2.563, 2.548, 1.886, -0.749, 0.808]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.156\n       energy 91.000\n  AB [1.320, -0.900, 1.141]\n      partner B\n      partner interface: BA\n      theta1 2.327 theta2 2.797 phi1 -3.097 phi2 0.218 omega 2.128\n      [2.327, 2.797, -3.097, 0.218, 2.128]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.218\n       energy 61.450\nmol B:\n  com 0.000 0.000 0.000\n  BC [-1.793, 0.636, -0.017]\n      partner C\n      partner interface: CB\n      theta1 2.205 theta2 2.496 phi1 -0.047 phi2 2.351 omega -1.672\n      [2.205, 2.496, -0.047, 2.351, -1.672]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.122\n       energy 100.310\n  BA [-0.142, 0.749, -1.552]\n      partner A\n      partner interface: AB\n      theta1 2.797 theta2 2.327 phi1 0.218 phi2 -3.097 omega 2.128\n      [2.797, 2.327, 0.218, -3.097, 2.128]\n      n1 0.000 0.000 1.000\n      n2 0.000 0.000 1.000\n       sigma 0.218\n       energy 61.450\n</code></pre>"},{"location":"getMolGeometryFromPDBStructure/#prepare-the-nerdss-inputs","title":"Prepare the NERDSS inputs","text":"<p>Following are the input files for the NERDSS simulation based on the above outputs:</p> <p>A.mol</p> <pre><code>##\n# A molecule information file\n##\n\nName = A\ncheckOverlap = true\n\n# translational diffusion constants\nD = [10.0, 10.0, 10.0]\n\n# rotational diffusion constants\nDr = [0.02, 0.02, 0.02]\n\n# Coordinates\nCOM    0.0000    0.0000    0.0000\nAC    -0.1880    0.4150    1.4460\nAB     1.3200   -0.9000    1.1410\n\n# bonds for visualization only.\nbonds = 2\ncom AC\ncom AB\n</code></pre> <p>B.mol</p> <pre><code>##\n# B molecule information file\n##\n\nName = B\ncheckOverlap = true\n\n# translational diffusion constants\nD = [10.0, 10.0, 10.0]\n\n# rotational diffusion constants\nDr = [0.02, 0.02, 0.02]\n\n# Coordinates\nCOM    0.0000    0.0000    0.0000\nBC    -1.7930    0.6360   -0.0170\nBA    -0.1420    0.7490   -1.5520\n\n# bonds for visualization only.\nbonds = 2\ncom BC\ncom BA\n</code></pre> <p>C.mol</p> <pre><code>##\n# C molecule information file\n##\n\nName = C\ncheckOverlap = true\n\n# translational diffusion constants\nD = [10.0, 10.0, 10.0]\n\n# rotational diffusion constants\nDr = [0.02, 0.02, 0.02]\n\n# Coordinates\nCOM    0.0000    0.0000    0.0000\nCA     0.3760    0.6690   -0.6540\nCB     0.2670   -0.7330    0.5600\n\n# bonds for visualization only.\nbonds = 2\ncom CA\ncom CB\n</code></pre> <p>parm.inp</p> <pre><code># Input file\n\nstart parameters\n    nItr = 10000000\n    timeStep = 0.1\n\n    timeWrite = 1000\n    trajWrite = 10000000\n    pdbWrite = 100000\n    restartWrite = 100000\n    scaleMaxDisplace = 100.0\n    overlapSepLimit = 2.0\nend parameters\n\nstart boundaries\n    WaterBox = [200,200,200]\nend boundaries\n\nstart molecules\n    A : 50\n    B : 50\n    C : 50\nend molecules\n\nstart reactions\n    #### A - C ####\n    A(AC) + C(CA) &lt;-&gt; A(AC!1).C(CA!1)\n    onRate3Dka = 0.91\n    offRatekb = 0.1\n    sigma = 0.156\n    norm1 = [0,0,1]\n    norm2 = [0,0,1]\n    assocAngles = [2.563, 2.548, 1.886, -0.749, 0.808]\n    excludeVolumeBound = True\n\n    #### A - B ####\n    A(AB) + B(BA) &lt;-&gt; A(AB!1).B(BA!1)\n    onRate3Dka = 0.61\n    offRatekb = 0.1\n    sigma = 0.218\n    norm1 = [0,0,1]\n    norm2 = [0,0,1]\n    assocAngles = [2.327, 2.797, -3.097, 0.218, 2.128]\n    excludeVolumeBound = True\n\n    #### B - C ####\n    B(BC) + C(CB) &lt;-&gt; B(BC!1).C(CB!1)\n    onRate3Dka = 1\n    offRatekb = 0.1\n    sigma = 0.122\n    norm1 = [0,0,1]\n    norm2 = [0,0,1]\n    assocAngles = [2.205, 2.496, -0.047, 2.351, -1.672]\n    excludeVolumeBound = True\nend reactions\n</code></pre>"},{"location":"getMolGeometryFromPDBStructure/#run-the-nerdss-simulation","title":"Run the NERDSS simulation","text":"<pre><code>./nerdss -f parm.inp &gt; output.log\n</code></pre>"},{"location":"getMolGeometryFromPDBStructure/#analyze-the-nerdss-outputs","title":"Analyze the NERDSS outputs","text":"<p>histogram_complexes_time.dat</p> <pre><code>Time (s): 0\n50  A: 1. \n50  B: 1. \n50  C: 1. \nTime (s): 0.0001\n50  A: 1. \n50  B: 1. \n50  C: 1. \nTime (s): 0.0002\n50  A: 1. \n50  B: 1. \n50  C: 1. \n\n...\n\nTime (s): 0.9999\n41  A: 1. B: 1. C: 1. \n5   A: 1. C: 1. \n4   B: 1. C: 1. \n4   A: 1. B: 1. \n1   B: 1. \nTime (s): 1\n41  A: 1. B: 1. C: 1. \n5   A: 1. C: 1. \n4   B: 1. C: 1. \n4   A: 1. B: 1. \n1   B: 1. \n</code></pre> <pre><code>import ioNERDSS as ion\n\n\nfilename = './histogram_complexes_time.dat'\ndesired_components = [\"A: 1\", \"B: 1\", \"C: 1\"]\ntimes, counts = ion.get_time_dependence(filename, desired_components)\nion.plot_time_dependence(times, counts)\n</code></pre> <p></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#quick-start-guide-for-nerdss-setup","title":"Quick Start Guide for NERDSS Setup","text":"<p>Note:</p> <p>If you prefer using Docker for environment setup (it might be slow), jump directly to Step 4.</p> <p>Windows OS: It's recommended to use either Windows Subsystem for Linux (WSL) or Docker.</p> <p>Step 1: Clone the Repository</p> <pre><code>git clone https://github.com/mjohn218/NERDSS.git\n</code></pre> <p>Step 2: Install Dependencies</p> <ul> <li>For Ubuntu or WSL:</li> </ul> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential libgsl-dev\n</code></pre> <ul> <li>For macOS:</li> </ul> <p>Install Homebrew:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Install GCC and GSL:</p> <pre><code>brew update\nbrew install gcc gsl\n</code></pre> <p>Step 3: Compile NERDSS</p> <p>Navigate to the NERDSS directory and compile:</p> <pre><code>cd NERDSS\nmake serial\n</code></pre> <p>The resulting executable will be located in the <code>bin</code> folder.</p> <p>Install ioNERDSS library from PyPi</p> <p>Install Anaconda, then</p> <pre><code>conda create --name ionerdss\nconda activate ionerdss\nconda install pip\npip install ioNERDSS\npip install jupyter\n</code></pre> <p>Step 4: Using Docker for Environment Setup (Optional)</p> <p>If you'd rather not install the required tools directly on your machine, you can use Docker:</p> <ul> <li> <p>Install Docker</p> </li> <li> <p>Pull the pre-configured Docker image:</p> </li> </ul> <p>Intel Chip:</p> <pre><code>docker pull sikaoguo/nerdsstutorial:latest\n</code></pre> <p>Mac M1 Chip:</p> <pre><code>docker pull sikaoguo/nerdsstutorial:m1\n</code></pre> <ul> <li>Launch the Docker image:</li> </ul> <p>To run <code>nerdss</code> with the <code>.inp</code> file in the current folder and start Jupyter for analyze after the simulation done:</p> <pre><code>docker run -e RUN_NERDSS=true -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To run only <code>nerdss</code>:</p> <pre><code>docker run -e RUN_NERDSS=true -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To start only <code>Jupyter</code>:</p> <pre><code>docker run -e ANALYZE_OUTPUT=true -p 8888:8888 -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>To run Container only:</p> <pre><code>docker run -v $(pwd):/SIMULATION -it sikaoguo/nerdsstutorial:latest\n</code></pre> <p>Note: Replace <code>$(pwd)</code> with <code>${PWD}</code> in Windows powershell.</p> <p>When you do the above, any changes you make to current folder on your local machine will be reflected in <code>/SIMULATION</code> in the Docker container, and vice versa.</p> <ol> <li> <p>Copying files from host to container:      <code>bash     docker cp &lt;path-on-host&gt; &lt;container-id-or-name&gt;:&lt;path-in-container&gt;</code></p> </li> <li> <p>Copying files from container to host:     <code>bash     docker cp &lt;container-id-or-name&gt;:&lt;path-in-container&gt; &lt;path-on-host&gt;</code></p> </li> </ol>"},{"location":"pub/","title":"Publications Using NERDSS","text":"<ul> <li>Jhaveri, A., Loggia, S., Qian, Y., &amp; Johnson, M.E.* Discovering optimal kinetic pathways for self-assembly using automatic differentiation.\u00a0Submitted, (2023).</li> <li>Xie, Q., Lee, S.O., Vissamsetti, N., Guo, S.,\u00a0Johnson, M.E., Fried, S.D.\u00a0Secretion-Catalyzed Assembly of Protein Biomaterials on a Bacterial Membrane Surface.\u00a0Angewantde Chemie,\u00a0e202305178 (2023).</li> <li>Qian, Y., Evans, D., Mishra, B., Fu, Y., Liu, Z., Guo, S. &amp; Johnson, M.E.*\u00a0Temporal control by co-factors prevents kinetic trapping in retroviral Gag lattice assembly Biophysical Journal,\u00a0122, 1-18. (2023)\u00a0bioRxiv version</li> <li>Guo, S., Saha, I., Saffarian, S., &amp; Johnson, M.E.*\u00a0Structure of the HIV immature lattice allows for essential lattice remodeling within budded virions.\u00a0eLife\u00a084881 (2023).\u00a0bioRxiv version</li> <li>Guo, S., Sodt, A.J., &amp; Johnson, M.E.*\u00a0Large self-assembled clathrin lattices spontaneously disassemble without sufficient adaptor proteins.\u00a0PLoS Comp. Biol.\u00a018,\u00a0e1009969\u00a0(2022).</li> </ul>"},{"location":"virusAssembly/","title":"Simulation of the Remodeling of HIV-1 Immature Lattice","text":"<p>The inputs can be found here.</p>"}]}